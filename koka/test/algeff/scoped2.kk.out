[[3],[2,1],[1,2],[1,1,1]]
(state=12, [[3],[2,1],[1,2],[1,1,1]])
[(state=1, [3]),(state=2, [2,1]),(state=2, [1,2]),(state=3, [1,1,1])]
one: [3]
.Eff-nondet : forall<a> (.ops-nondet<a>) -> operation<a>
.Eff-state : forall<a,b> (.ops-state<b,a>) -> operation<a>
.Op-choice : forall<a,b> (list<b>) -> .ops-nondet<a>
.Op-get : forall<a,b> .ops-state<a,b>
.Op-put : forall<a,b> (a) -> .ops-state<a,b>
.copy : forall<a,b> (.ops-nondet<a>, list<b>) -> .ops-nondet<a>
.tag-Eff-nondet: string
.tag-Eff-state: string
choice : forall<a> (xs : list<a>) -> nondet a
choices : forall<a,e> (action : () -> <nondet,state<int>|e> a) -> <nondet,state<int>|e> a
fail : forall<a> () -> nondet a
get : forall<a> () -> (state<a>) a
global : forall<a,b,e> (s : a, action : () -> <nondet,state<a>|e> b) -> e (a, list<b>)
incr : (i : ?int) -> (state<int>) ()
knapsack : (w : int, vs : list<int>) -> <nondet,div> list<int>
local : forall<a,b,e> (s : a, action : () -> <nondet,state<a>|e> b) -> e list<(a, b)>
main : () -> <div,console> ()
put : forall<a> (i : a) -> (state<a>) ()
show : (m : maybe<list<int>>) -> string
show : (xs : list<(int, list<int>)>) -> string
show : (x : (int, list<list<int>>)) -> string
show : (xss : list<list<int>>) -> string
solution : forall<a,e> (action : () -> <nondet|e> a) -> e maybe<a>
solutions : forall<a,e> (action : () -> <nondet|e> a) -> e list<a>
state : forall<a,b,e> (i : a, action : () -> <state<a>|e> b) -> e (a, b)
test1 : () -> div list<list<int>>
test2 : () -> div (int, list<list<int>>)
test3 : () -> div list<(int, list<int>)>
test4 : () -> div maybe<list<int>>
untilJust : forall<a,b,e> (xs : list<a>, f : (a) -> e maybe<b>) -> e maybe<b>